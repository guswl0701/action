name: Deploy to AWS

on:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - '.github/workflows/workflows.yaml'
      - 'main.tf'
      - '**/*.tf'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2
      ECR_REPOSITORY: "your-account-id.dkr.ecr.ap-northeast-2.amazonaws.com/django-app-repo"
      ECS_CLUSTER: "main-cluster"
      ECS_SERVICE: "app-service"
      ECS_TASK_DEFINITION: "app-task"

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        region: ${{ env.AWS_REGION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push Docker image to ECR
      id: build-and-push
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker tag ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ env.ECR_REPOSITORY }}:latest
        docker push ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        docker push ${{ env.ECR_REPOSITORY }}:latest

    - name: Update ECS service with new image
      id: update-ecs-service
      env:
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        ECS_CLUSTER: ${{ env.ECS_CLUSTER }}
        ECS_SERVICE: ${{ env.ECS_SERVICE }}
        ECS_TASK_DEFINITION: ${{ env.ECS_TASK_DEFINITION }}
      run: |
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }})
        NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ env.ECR_REPOSITORY }}:latest" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredBy, .registeredAt)')
        NEW_TASK_DEF_JSON=$(echo $NEW_TASK_DEF | jq -c .)
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF_JSON" | jq -r '.taskDefinition.taskDefinitionArn')
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition $NEW_TASK_DEF_ARN

    - name: Run Terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd path/to/terraform/directory
        terraform init
        terraform apply -auto-approve
