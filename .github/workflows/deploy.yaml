name: Deploy Django Image to AWS

on:
  push:
    branches:
      - main
    paths:
      - 'image.tf'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2
      ECR_REPOSITORY_DJANGO: "891377402975.dkr.ecr.ap-northeast-2.amazonaws.com/django-app-repo"
      ECS_CLUSTER: "main-cluster"
      ECS_SERVICE: "app-service"
      ECS_TASK_DEFINITION: "app-task"

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_DJANGO }}

    - name: Pull, tag and push Django Docker image to ECR
      id: pull-and-push-django
      run: |
        docker pull wangamy/newtickettopia:latest
        docker tag wangamy/newtickettopia:latest ${{ env.ECR_REPOSITORY_DJANGO }}:latest
        docker push ${{ env.ECR_REPOSITORY_DJANGO }}:latest

    - name: Run Terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        terraform init
        terraform apply -auto-approve

    - name: Update ECS service with new image
      run: |
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} | jq '.taskDefinition')
        NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ env.ECR_REPOSITORY_DJANGO }}:latest" '.containerDefinitions[0].image = $IMAGE | del(.compatibilities, .taskDefinitionArn, .revision, .status, .requiresAttributes, .registeredBy, .registeredAt)')
        NEW_TASK_DEF_JSON=$(echo $NEW_TASK_DEF | jq -c .)
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF_JSON" | jq -r '.taskDefinition.taskDefinitionArn')
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition $NEW_TASK_DEF_ARN
